server:
  port: 8080

resilience4j.retry:
  configs:
    default:
      maxAttempts: 3  # ?? ?? ??
      waitDuration: 1000  # ? ???? ?? ?? (ms)
      retryExceptions: # retryExceptions ? ??? ??? ???
        - me.ramos.resilience4j.exception.RetryException
      ignoreExceptions: # retryExceptions ? ???? ?? ??? ignoreExceptions ? ???
        - me.ramos.resilience4j.exception.IgnoreException
  instances:
    simpleRetryConfig:
      baseConfig: default

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      minimumNumberOfCalls: 7                                   # ?? 7???? ??? CLOSE ? ???? ????. ?? slidingWindowSize ? ?? ??, ??? ?? ??? ??.
      slidingWindowSize: 10                                     # (minimumNumberOfCalls ????) 10?? ??? ???? ????.
      waitDurationInOpenState: 10s                              # OPEN ???? HALF_OPEN ?? ??? ??? ??? ????

      failureRateThreshold: 40                                  # slidingWindowSize ? ? %? recordException ?? OPEN ?? ?? ????

      slowCallDurationThreshold: 3000                           # ? ms ?? ??? ???? ??? ??? ??? ????
      slowCallRateThreshold: 60                                 # slidingWindowSize ? ? %? slowCall ?? OPEN ?? ?? ????

      permittedNumberOfCallsInHalfOpenState: 5                  # HALF_OPEN ???? 5???? CLOSE ? ???? ????.
      automaticTransitionFromOpenToHalfOpenEnabled: true        # OPEN ???? ???? HALF_OPEN ?? ? ????

      eventConsumerBufferSize: 10                               # actuator ? ?? ??? ?? ???

      recordExceptions:
        - me.ramos.resilience4j.exception.RecordException
      ignoreExceptions:
        - me.ramos.resilience4j.exception.IgnoreException
  instances:
    simpleCircuitBreakerConfig:
      baseConfig: default

management:
  endpoints.web.exposure.include: '*'
  endpoint.health.show-details: always
  health:
    diskSpace.enabled: false
    circuitbreakers.enabled: true
  metrics.distribution.percentiles-histogram:
    http.server.requests: true
    resilience4j.circuitbreaker.calls: true
