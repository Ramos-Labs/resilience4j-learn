server:
  port: 8080

resilience4j.retry:
  configs:
    default:
      # ?? ?? ??
      maxAttempts: 3  # ?? ?? ??
      # ? ???? ?? ?? ?? (ms)
      waitDuration: 1000
      # retryExceptions? ??? ??? ??? ??
      retryExceptions:
        - me.ramos.resilience4j.exception.RetryException
      # retryExceptions? ???? ?? ??? ignoreExceptions? ????.
      ignoreExceptions:
        - me.ramos.resilience4j.exception.IgnoreException
  instances:
    simpleRetryConfig:
      baseConfig: default

resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowType: COUNT_BASED
      # ?? 7??? ??? CLOSE? ???? ??.
      # ????? slidingWindowSize? ?? ??, ??? ?? ??? ??.
      minimumNumberOfCalls: 7
      # minimumNumberOfCalls ??? 10?? ??? ???? ??
      slidingWindowSize: 10
      # OPEN ???? HALF_OPEN?? ??? ??? ??? ??? ??
      waitDurationInOpenState: 10s

      # slidingWindowSize ? ? %? recordException?? OPEN?? ?? ??? ??
      failureRateThreshold: 40

      # ? ms ?? ??? ???? ??? ??? ??? ??? ??
      slowCallDurationThreshold: 3000
      # slidingWindowSize ? ? %? slowCall?? OPEN?? ??? ??
      slowCallRateThreshold: 60

      # HALF_OPEN ???? 5??? CLOSE? ???? ??
      permittedNumberOfCallsInHalfOpenState: 5
      # OPEN ???? ???? HALF_OPEN?? ? ??? ??
      automaticTransitionFromOpenToHalfOpenEnabled: true

      # actuator? ?? ??? ?? ???
      eventConsumerBufferSize: 10

      recordExceptions:
        - me.ramos.resilience4j.exception.RecordException
      ignoreExceptions:
        - me.ramos.resilience4j.exception.IgnoreException
  instances:
    simpleCircuitBreakerConfig:
      baseConfig: default

management:
  endpoints.web.exposure.include: '*'
  endpoint.health.show-details: always
  health:
    diskSpace.enabled: false
    circuitbreakers.enabled: true
  metrics.distribution.percentiles-histogram:
    http.server.requests: true
    resilience4j.circuitbreaker.calls: true
